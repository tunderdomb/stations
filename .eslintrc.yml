root: true

env:
    node: true
    commonjs: true
    browser: true
    mocha: true

rules:
    # ====================
    # debug
    # ====================

    # allow the use of console in the node environment
    no-console: 0
    # disallow use of debugger
    no-debugger: 1


    # ====================
    # literals
    # ====================

    # --------------------
    # regexp
    # --------------------

    # disallow multiple spaces in a regular expression literal
    no-regex-spaces: 2
    # disallow division operators explicitly at beginning of regular expression
    no-div-regex: 1

    # --------------------
    # numbers
    # --------------------

    # disallow use of octal literals
    no-octal: 2

    # --------------------
    # strings
    # --------------------

    # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-octal-escape: 1
    # disallow use of multiline strings `"Line 1 \Line 2"`
    no-multi-str: 1

    # --------------------
    # arrays
    # --------------------

    # disallow sparse arrays `[,,]`
    no-sparse-arrays: 1


    # ====================
    # language
    # ====================

    # controls location of Use Strict Directives
    strict: [1, "never"]
    # disallow use of the continue statement
    no-continue: 1
    # disallow this keywords outside of classes or class-like objects
    no-invalid-this: 1
    # disallow use of undefined variable
    no-undefined: 0
    # enforce consistent naming when capturing the current execution context
    consistent-this: 0
    # enforce use of function declarations or expressions
    func-style: 0


    # ====================
    # code logic
    # ====================

    # --------------------
    # expressions & statements
    # --------------------

    # disallow use of labeled statements
    no-labels: 2
    # disallow usage of expressions in statement position `if(0) 0` `"Hello world"`
    no-unused-expressions: [1, {
        "allowShortCircuit": true,
        "allowTernary": true
    }]
    # allow the use of magic numbers
    no-magic-numbers: 0
    # disallow unnecessary concatenation of literals or template literals `"a" + "b"`
    no-useless-concat: 1
    # disallow unnecessary parentheses
    no-extra-parens: [1, "all"]
    # disallow the use of ternary operators when a simpler alternative exists
    no-unneeded-ternary: [1, {"defaultAssignment": false}]
    # require immediate function invocation to be wrapped in parentheses
    wrap-iife: [0, "any"]

    # --------------------
    # execution & instantiation
    # --------------------

    # disallow use of new operator for Function object
    no-new-func: 2
    # disallows creating new instances of String, Number, and Boolean
    no-new-wrappers: 1
    # disallow use of the Array constructor
    no-array-constructor: 1
    # disallow the use of the Object constructor
    no-new-object: 1
    # disallow use of the new operator when not part of an assignment or comparison
    no-new: 1
    # disallow unnecessary .call() and .apply()
    no-useless-call: 1
    # disallow the omission of parentheses when invoking a constructor with no arguments
    new-parens: 1

    # --------------------
    # assignments & declarations
    # --------------------

    # disallow assigning to the exception in a catch block
    no-ex-assign: 2
    # disallow overwriting functions written as function declarations
    no-func-assign: 2
    # disallow use of empty destructuring patterns `{a: {}} = foo`
    no-empty-pattern: 2
    # disallow reassignments of native objects `String = new Object()`
    no-native-reassign: 2
    # disallow declaring the same variable more than once
    no-redeclare: [1, {"builtinGlobals": false}]
    # disallow use of assignment in return statement
    no-return-assign: [1, "except-parens"]
    # *** disallow declaration of variables already declared in the outer scope
    no-shadow: [1, {
        "builtinGlobals": false,
        "hoist": "functions"
    }]
    # disallow use of undefined when initializing variables `var foo = undefined`
    no-undef-init: 1
    # disallow creation of functions within loops `funcs[i] = function(){}`
    no-loop-func: 1

    # enforce or disallow variable initializations at definition
    init-declarations: 0

    # --------------------
    # occurances & references
    # --------------------

    # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undef: 1
    # disallow declaration of variables that are not used in the code
    no-unused-vars: [1, {
        "vars": "local",     # checks only that locally-declared variables are used but will allow global variables to be unused
        "args": "after-used" # only the last argument must be used
    }]
    # *** disallow use of variables before they are defined
    no-use-before-define: [1, "nofunc"]

    # --------------------
    # conditions
    # --------------------

    # disallow empty statements `if (foo) {}`
    no-empty: 2
    # disallow comparisons with the value NaN `if (foo != NaN)`
    use-isnan: 2
    # Ensure that the results of typeof are compared against a valid string
    valid-typeof: 2
    # disallow fallthrough of case statements
    no-fallthrough: 2
    # disallow use of constant expressions in conditions `if (false)`
    no-constant-condition: 1
    # disallow double-negation boolean casts in a boolean context `if (!!foo)`
    no-extra-boolean-cast: 1
    # disallow negation of the left operand of an in expression `if (!a in b)`
    no-negated-in-lhs: 1
    # make sure for-in loops have an if statement `hasOwnProperty`
    guard-for-in: 1
    # disallow comparisons where both sides are exactly the same
    no-self-compare: 1

    # --------------------
    # keywords
    # --------------------

    # disallow use of the with statement
    no-with: 2
    # restrict what can be thrown as an exception
    no-throw-literal: 2
    # disallow the catch clause parameter name being the same as a variable in the outer scope
    no-catch-shadow: 1


    # ====================
    # node
    # ====================

    no-new-require: 1
    no-path-concat: 1
    no-process-exit: 1
    callback-return: 0
    global-require: 0
    handle-callback-err: 0
    no-mixed-requires: 0
    no-new-require: 0
    no-restricted-modules: 0
    no-sync: 0


    # ====================
    # duh..
    # ====================

    # disallow duplicate arguments in functions
    no-dupe-args: 2
    # disallow duplicate keys when creating object literals
    no-dupe-keys: 2
    # disallow a duplicate case label
    no-duplicate-case: 2
    # disallow the use of empty character classes in regular expressions
    no-empty-character-class: 2
    # disallow invalid regular expression strings in the RegExp constructor
    no-invalid-regexp: 2
    # disallow the use of object properties of the global object (Math and JSON) as functions
    no-obj-calls: 2
    # disallow unreachable statements after a return, throw, continue, or break statement
    no-unreachable: 2
    # disallow use of arguments.caller or arguments.callee
    no-caller: 2
    # disallow use of labels for anything other than loops and switches
    no-empty-label: 2
    # disallow use of eval()
    no-eval: 2
    # disallow adding to native types
    no-extend-native: 2
    # disallow unnecessary function binding
    no-extra-bind: 2
    # disallow use of eval()-like methods
    no-implied-eval: 2
    # disallow usage of __iterator__ property
    no-iterator: 2
    # disallow usage of __proto__ property
    no-proto: 2
    # disallow use of javascript: urls
    no-script-url: 2
    # disallow deletion of variables
    no-delete-var: 2
    # disallow labels that share a name with a variable
    no-label-var: 2
    # disallow shadowing of names such as arguments `function NaN(){}`
    no-shadow-restricted-names: 2
    # disallow negated conditions
    no-negated-condition: 0
    # require use of the second argument for parseInt()
    radix: 0
    # require return statements to either always or never specify values
    consistent-return: 0
    # disallow reassignment of function parameters
    no-param-reassign: 0


    # ====================
    # wtf
    # ====================

    # disallow use of process.env
    no-process-env: 0
    # disallow usage of configurable warning terms in comments - e.g. T O D O or F I X M E
    no-warning-comments: 0
    # disallow use of unary operators, ++ and --
    no-plusplus: 0
    # disallow use of certain syntax in code
    no-restricted-syntax: 0
    # disallow the use of ternary operators
    no-ternary: 0
    # sort variables within the same declaration block
    sort-vars: 0


    # ====================
    # code style
    # ====================

    # --------------------
    # holy
    # --------------------

    # enforce one true brace style
    brace-style: [1, "stroustrup", {"allowSingleLine": true}]
    # enforce spacing before and after comma
    comma-spacing: [1, {
        "before": false,
        "after": true
    }]
    # enforce one true comma style
    comma-style: [1, "first", {"exceptions": {
        "ArrayExpression": true,
        "ObjectExpression": true
    }}]
    # specify tab or space width for your code
    indent: [1, 2, {
        "SwitchCase": 1,
        "VariableDeclarator": 1
    }]
    # enforce spacing between keys and values in object literal properties
    key-spacing: [1, {
        "beforeColon": false,
        "afterColon": true,
        "mode": "minimum"
    }]
    # specify whether backticks, double or single quotes should be used
    quotes: [1, "double", "avoid-escape"]
    # require or disallow use of semicolons instead of ASI
    semi: [1, "never"]
    # require quotes around object literal property names
    quote-props: [1, "consistent", {"keywords": false}]

    # --------------------
    # structure
    # --------------------

    # treat var statements as if they were block scoped
    block-scoped-var: 1
    # disallow unnecessary nested blocks
    no-lone-blocks: 1 # use /*eslint-env es6*/ to disable it in files, or remove when every script is es6
    # disallow else after a return in an if
    no-else-return: 1
    # disallow if as the only statement in an else block
    no-lonely-if: 1
    # require or disallow one variable declaration per function
    one-var: [1, {
        "initialized": "never"
    }]
    # disallow function or variable declarations in nested blocks
    no-inner-declarations: [1, "functions"]
    # require declaration of all vars at the top of their containing scope
    vars-on-top: 0

    # --------------------
    # operators
    # --------------------

    # disallow use of the comma operator
    no-sequences: 1
    # require or disallow Yoda conditions
    yoda: [1, "never", {"exceptRange": true}]
    # disallow or enforce trailing commas
    comma-dangle: 1
    # enforce operators to be placed before or after line breaks
    operator-linebreak: [1, "before"]
    # *** require the use of === and !==
    eqeqeq: [0, "smart"]
    # disallow use of bitwise operators
    no-bitwise: 0
    # disallow use of the void operator
    no-void: 0
    # disallow nested ternary expressions
    no-nested-ternary: 0
    # require assignment operator shorthand where possible or prohibit it entirely
    operator-assignment: 0

    # --------------------
    # syntax
    # --------------------

    # disallow unnecessary semicolon
    no-extra-semi: 1
    # *** specify curly brace conventions for all control statements
    curly: [1, "multi-line", "consistent"]
    # enforces consistent newlines before or after dots
    dot-location: [1, "property"]
    # disallow the use of leading or trailing decimal points in numeric literals
    no-floating-decimal: 0

    # --------------------
    # naming convention
    # --------------------

    # require camel case names
    camelcase: 1
    # this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    id-length: [1, {"min": 1, "max": 30}]
    # disallow dangling underscores in identifiers
    no-underscore-dangle: 1
    # require a capital letter for constructors
    new-cap: [1, {
        "newIsCap": true,
        "capIsNew": false,
        "properties": true
    }]

    # require identifiers to match the provided regular expression
    id-match: 0
    # require function expressions to have a name
    func-names: 0

    # --------------------
    # complexity
    # --------------------

    # specify the maximum depth that blocks can be nested
    max-depth: [1, 5]
    # specify the maximum length of a line in your program
    max-len: [1, 200]
    # specify the maximum depth callbacks can be nested
    max-nested-callbacks: [1, 3]
    # limits the number of parameters that can be used in the function declaration
    max-params: [1, 5]
    # specify the maximum number of statement allowed in a function
    max-statements: [1, 80]

    # --------------------
    # whitespace
    # --------------------

    # Avoid code that looks like two expressions but is actually one
    no-unexpected-multiline: 1
    # disallow irregular whitespace outside of strings and comments `\u000B` etc
    no-irregular-whitespace: 1
    # disallow mixed spaces and tabs for indentation
    no-mixed-spaces-and-tabs: 1
    # disallow trailing whitespace at the end of lines
    no-trailing-spaces: 1

    # --------------------
    # linebreaks
    # --------------------

    # disallow multiple empty lines
    no-multiple-empty-lines: [1, {"max": 2, "maxEOF": 1}]
    # *** require or disallow an empty newline after variable declarations
    newline-after-var: [0, "always"]
    # enforce newline at the end of file, with no multiple empty lines (fixable)
    eol-last: 0
    # enforce empty lines around comments
    lines-around-comment: 0
    # disallow mixed 'LF' and 'CRLF' as linebreaks
    linebreak-style: 0

    # --------------------
    # spaces
    # --------------------

    # enforce padding within blocks
    padded-blocks: 0
    # disallow space between function identifier and application `fn ()`
    no-spaced-func: 1
    # disallow use of multiple spaces `if(foo  === "bar")`
    no-multi-spaces: [1, {"exceptions": {
        "Property": true,          # allows aligning variable declarations
        "VariableDeclarator": true # allows aligning property values in object literals
    }}]
    # require or disallow padding inside computed properties `obj[a]`
    computed-property-spacing: [1, "never"]
    # disallow or enforce spaces inside of single line blocks `if (foo) { bar = 0; }`
    block-spacing: [1, "always"]
    # enforce spacing inside array brackets `[1, 2]`
    array-bracket-spacing: [1, "never"]
    # require or disallow padding inside curly braces
    object-curly-spacing: [1, "never"]
    # enforce spacing before and after semicolons
    semi-spacing: [1, {"before": false, "after": true}]
    # require a space before certain keywords `{} catch`
    space-before-keywords: [1, "always"]
    # require a space after certain keywords `if ()`
    space-after-keywords: [1, "always"]
    # require or disallow a space before blocks `if (a) {`
    space-before-blocks: [1, "always"]
    # require or disallow a space before function opening parenthesis `function () {`
    space-before-function-paren: [1, "never"]
    # require or disallow spaces inside parentheses
    space-in-parens: [1, "never"]
    # require spaces around operators
    space-infix-ops: [1, {"int32Hint": true}]
    # require a space after return, throw, and case
    space-return-throw-case: 1
    # require or disallow spaces before/after unary operators
    space-unary-ops: [1, {"words": true, "nonwords": false}]

    # --------------------
    # comments
    # --------------------

    # disallow comments inline after code
    no-inline-comments: 0
    # require or disallow a space immediately following the // or /* in a comment
    spaced-comment: 0


    # ====================
    # docs
    # ====================

    # Ensure JSDoc comments are valid
    valid-jsdoc: [1, {
        "requireReturn": false,
        "requireReturnDescription": false,
        "requireParamDescription": false
    }]
    # Require JSDoc comment
    require-jsdoc: 0
